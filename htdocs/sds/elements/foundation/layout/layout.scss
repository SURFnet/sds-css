html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

.sds--page-container {
  width: calc(100% - #{$space-page-padding*2});
  max-width: $width-grid-max;
  margin-left: auto;
  margin-right: auto;
}

.sds--grid-container {
  display: grid;
  gap: 0 var(--sds--space--3);

  // See "$grid-sizes" for defined grid-behavior.
  @each $grid-size, $settings in $grid-sizes {
    // The mixin "bp-em" can take 1 or 2 values, separated by a comma.
    // Therefore define variables so we can print the class-names easier.
    $bp-min: null;
    $bp-max: null;

    // Check if a range of breakpoints is defined, if not only use single breakpoint.
    @if map-get($settings, bp-range) {
      $bp-min: map-get(map-get($settings, bp-range), min);
      $bp-max: map-get(map-get($settings, bp-range), max);
    }
    @else {
      $bp-min: map-get($settings, bp);
    }

    // Define number of columns.
    @include bp-em($bp-min, $bp-max) {
      grid-template-columns: repeat(#{map-get($settings, columns)}, 1fr);
    }

    // Create util-classes to be able to place elements on the defined grid above.
    @for $i from 1 through map-get($settings, columns) {
      // Span a number of columns.
      // e.g. ".sds--col--lg--span-6".
      .sds--col--#{$grid-size}--span-#{$i} {
        @include bp-em($bp-min, $bp-max) {
          grid-column: span #{$i} / span #{$i};
        }
      }
    }
    @for $i from 1 through map-get($settings, columns) {
      // Start at a specific column.
      // e.g. ".sds--col--md--start-3".
      .sds--col--#{$grid-size}--start-#{$i} {
        @include bp-em($bp-min, $bp-max) {
          grid-column-start: #{$i};
        }
      }
    }
  }
}

// Spacing.
:root {
  // Increments of base-value.
  @for $i from 1 through $space-scale-max {
    $value: rem($space-base-value*$i);
    --sds--space--#{$i}: #{$value};
  }
  // Increments of base-value plus a half.
  @for $i from 1 through $space-half-scale-max {
    $value: rem($space-base-value*($i - 0.5));
    @if($i == 1) {
      --sds--space--half: #{$value};
    }
    @else {
      --sds--space--#{$i - 1}-and-a-half: #{$value};
    }
  }
}

// Spacing util-classes.
@for $i from 1 through $space-scale-max {
  @each $direction in $space-directions {
    .sds--space--#{$direction}--#{$i} {
      margin-#{$direction}: var(--sds--space--#{$i});
    }
  }
}
@for $i from 1 through $space-half-scale-max {
  @each $direction in $space-directions {
    $value: #{$i - 1}-and-a-half;
    @if($i == 1) {
      $value: half;
    }
    .sds--space--#{$direction}--#{$value} {
      margin-#{$direction}: var(--sds--space--#{$i - 1}-and-a-half);
    }
  }
}

.sds--visually-hidden {
  @include visually-hidden();
}
